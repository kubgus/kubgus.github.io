---
import ContentCard from "./content-card.astro";
import LinkCard from "./link-card.astro";

const { cardContent } = Astro.props;

const availableThemes = [
    "primary-accent-dark",
    "complementary-accent-dark-1",
    "complementary-accent-dark-2",
    "complementary-accent-dark-3",
    ];
---

<style is:global>
.wall-of-fame {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
}

@media (max-width: 1100px) {
    .wall-of-fame {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 768px) {
    .wall-of-fame {
        grid-template-columns: repeat(1, 1fr);
    }
}

.wall-of-fame > *:nth-child(4n+1),
.wall-of-fame > *:nth-child(4n+4) {
    grid-column: span 2;
}

@media (max-width: 1100px) {
    .wall-of-fame > *:nth-child(4n+1),
    .wall-of-fame > *:nth-child(4n+4) {
        grid-column: span 1; }
}

@media (max-width: 768px) {
    .wall-of-fame > *:nth-child(4n+1),
    .wall-of-fame > *:nth-child(4n+4) {
        grid-column: span 1; }
}
</style>

<figure class="wall-of-fame">
    { cardContent.map((x: any, i: any) => {
    if (x.url) return (
        <LinkCard href={x.url} theme=`${availableThemes[i % availableThemes.length]}`>
            <h2>{x.title}</h2>
            <p>{x.description}</p>
        </LinkCard>
    );
    return (
        <ContentCard theme=`${availableThemes[i % availableThemes.length]}`>
            <h2>{x.title}</h2>
            <p>{x.description}</p>
        </ContentCard>
    );
    })}
</figure>
